// SASS MODULE - MIXINS ---------------------------------------------------------------------
/* CTA Button */
@mixin formIcon($isLeft: true) {
	font-size: 1rem;
	// width: $formIconPadding * 0.5;
	height: auto;
	max-height: $formHeight;
	position: absolute;
	z-index: 2;
	top: 0; bottom: 0;
	@if $isLeft {
		left: 1%;
	} @else {
		right: 1%;
	}
	// border-radius: 0 4px 4px 0;
	// background: #333;
	box-sizing: border-box;	
	text-align: center;	
	display: flex;
	align-items: center;
	justify-content: center;
}
@mixin cta($size: 1, $bgcolor: $secondaryColor, $textColor: $darkText, $rounded: false, $animate: false) {
    padding: 1rem 1rem;
    border-radius: 4px;
    @if ($rounded) {
        border-radius: 50px;    
    };
	font-weight: 700;
	margin-top: $size * 2rem;
	margin-bottom: $size * 1rem;	
	height: $size * 4rem;
	line-height: 2rem;
	color: $lightText;
	font-size: $size * 2rem;
	border: none;
	text-transform: uppercase;
    transition: all .4s ease-in-out;
    @if ($animate) {
        i {
            opacity: 0;
            transition: all 0.4s;
        }
        cursor: pointer;
        &:hover {
            transform: scale(1.1);
            i {
                opacity: 1;
            }
        }
    }	 
}
@mixin parallax($url: "../images/header.jpg") {
    background: rgb(5,74,145);
	background: linear-gradient(90deg, rgba(5,74,145,1) 0%, rgba(4,178,241,1) 62%, rgba(0,212,255,1) 100%);
    /* The image used */
	background-image: url($url);
  
    /* Create the parallax scrolling effect */
    background-attachment: fixed;
    background-position: 100% 100%;
    background-repeat: no-repeat;
	background-size: cover;
}

@mixin respond-to($breakpoint) {
	// If the key exists in the map
	@if map-has-key($breakpoints, $breakpoint) {
		// Prints a media query based on the value
		@media #{inspect(map-get($breakpoints, $breakpoint))} {
			@content;
		}
	}

	// If the key doesn't exist in the map
	@else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
			+ "Available breakpoints are: #{map-keys($breakpoints)}.";
	}
}

@mixin simpleSpace {

	// margin and padding values
	$spacings: (
		0,
		.25rem,
		.5rem,
		1rem,
		1.5rem,
		2rem,
	) !default;

	// margin and padding shorthand prefixes
	$prefixes: (
		p  : padding,
		px : (padding-left, padding-right),
		py : (padding-top, padding-bottom),

		pt : padding-top,
		pr : padding-right,
		pb : padding-bottom,
		pl : padding-left,

		m  : margin,
		mx : (margin-left, margin-right),
		my : (margin-top, margin-bottom),

		mt : margin-top,
		mr : margin-right,
		mb : margin-bottom,
		ml : margin-left,
	) !default;

	// Loop generating all spacing styles
	@each $attr-short, $attr-list in $prefixes {
		@each $space in $spacings {
			.#{$attr-short}-#{ index(($spacings), $space)-1 } {
				@each $attr in $attr-list {
					#{$attr}: #{$space} !important;
				}
			}
		}
	}
}

@mixin mq($breakpoint) {
	@media screen and (min-width: map-get($breakpointsMin, $breakpoint)){
		@content;
	}
}